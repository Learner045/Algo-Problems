public class Solution {
    public ArrayList<ArrayList<Integer>> subsets(ArrayList<Integer> A) {
        Collections.sort(A);
        
        //total num of sets  2^n
        int count = (int)Math.pow((double)2,(double)A.size());
        
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        
        //num 4 0100 - bit set at 2 ..so add A.get(2)
        //System.out.println(A.size()+" "+count);
        for(int i=0;i<count;i++){
            
            ArrayList<Integer> sub = new ArrayList<Integer>();
            
            //go through each bit - if bit is set then add num at that bit loc
            for(int j=0; j<A.size();j++){
                
                if(checkBit(i,j)==1){
                    
                    sub.add(A.get(j));//add num at bit which is set
                }
            }
            result.add(sub);
        }
        Collections.sort(result, new Comparator<ArrayList<Integer>>(){
            public int compare(ArrayList<Integer> i1, ArrayList<Integer> i2){
                if(i1.size()==0)return -1;
                if(i2.size()==0)return 1;
               
                    if(i1.size()<i2.size()){
                        for(int i=0;i<i1.size();i++){
                            if(i1.get(i)<i2.get(i))return -1;
                            else if(i1.get(i)>i2.get(i))return 1;
                        }
                    }
                    else{
                         for(int i=0;i<i2.size();i++){
                            if(i1.get(i)<i2.get(i))return -1;
                            else if(i1.get(i)>i2.get(i))return 1;
                        }
                    }
                    
                    return 0;
                
            }
            });
        return result;
    }
    public int checkBit(int num, int bit){
    int temp = 1<<bit;
     temp = temp & num;
    
    if(temp==0)return 0;
    return 1;
    }
}
